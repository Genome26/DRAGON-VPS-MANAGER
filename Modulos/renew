#!/usr/bin/env bash
#
# renew-expired.sh
#
# Reads /root/expired.log (format: "<locked_at> <user> <old_timeid>" in YYYYmmddHHMM),
# then prints a single header line with columns and each user in aligned columns below.
# After that, it prompts the user for which account to renew, how many days, and updates
# the relevant files silently, confirming the final new expiry date in human-readable form.
#

###############################################################################
# Configuration / file paths
###############################################################################
EXPIRED_LOG="/root/expired.log"
TIMEID_FILE="/root/timeid"
UEXPIRED_CMD="/bin/uexpired"  # The script to run with 'at'

###############################################################################
# Function to parse "YYYYmmddHHMM" -> "YYYY-MM-DD HH:MM:SS"
###############################################################################
parse_date() {
    local date_str="$1"

    # Transform YYYYmmddHHMM -> "YYYY-mm-dd HH:MM"
    local parseable
    parseable="$(echo "$date_str" \
        | sed -E 's|^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})$|\1-\2-\3 \4:\5|')"

    date -d "$parseable" "+%F %T" 2>/dev/null
}

###############################################################################
# 1) Make sure /root/expired.log exists and is not empty
###############################################################################
if [ ! -s "$EXPIRED_LOG" ]; then
    echo "No expired users found."
    exit 0
fi

###############################################################################
# 2) Print a single header, then each expired user in aligned columns
###############################################################################
echo "Expired Users:"
echo "----------------------------------------------------------------------"
# Print the header line with columns
printf "%-15s %-22s %s\n" "Username" "Locked_At" "Old_Expiry"
echo "----------------------------------------------------------------------"

# Read each line, parse each date, and print in columns
while IFS= read -r line; do
    locked_at="$(awk '{print $1}' <<< "$line")"
    user="$(awk '{print $2}' <<< "$line")"
    old_timeid="$(awk '{print $3}' <<< "$line")"

    locked_at_hr="$(parse_date "$locked_at")"
    [ -z "$locked_at_hr" ] && locked_at_hr="(unparsable)"

    old_timeid_hr="$(parse_date "$old_timeid")"
    [ -z "$old_timeid_hr" ] && old_timeid_hr="(unparsable)"

    # Print one line with columns properly spaced
    printf "%-15s %-22s %s\n" "$user" "$locked_at_hr" "$old_timeid_hr"
done < "$EXPIRED_LOG"

echo

###############################################################################
# 3) Ask which user to renew
###############################################################################
read -rp "Enter the name of the user to renew: " seluser

# Check that this user actually exists in expired.log
if ! grep -q "[[:space:]]$seluser[[:space:]]" "$EXPIRED_LOG"; then
    echo "User '$seluser' is not in the expired list."
    exit 1
fi

###############################################################################
# 4) Ask for how many days to renew
###############################################################################
read -rp "Enter the number of days to renew for $seluser: " days
if ! [[ "$days" =~ ^[0-9]+$ ]]; then
    echo "Error: '$days' is not a positive integer."
    exit 1
fi

###############################################################################
# 5) Calculate the new expiry time (from now), human-readable
###############################################################################
new_timeid="$(date -d "+$days days" "+%Y%m%d%H%M")"
new_timeid_hr="$(parse_date "$new_timeid")"

###############################################################################
# 6) Update /root/timeid, schedule silent 'at' job, remove from expired.log
###############################################################################
# Remove any existing line for this user in /root/timeid
sed -i "/^${seluser}[[:space:]]/d" "$TIMEID_FILE"
echo "$seluser $new_timeid" >> "$TIMEID_FILE"

echo "$UEXPIRED_CMD" | at -t "$new_timeid" >/dev/null 2>&1

# Remove user from expired.log
sed -i "/[[:space:]]$seluser[[:space:]]/d" "$EXPIRED_LOG"

###############################################################################
# 7) Final confirmation
###############################################################################
echo "User '$seluser' has been renewed until $new_timeid_hr."
exit 0

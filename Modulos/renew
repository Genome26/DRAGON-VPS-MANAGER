#!/usr/bin/env bash

#==============================================================================
# CONFIG / FILE PATHS
#==============================================================================
EXPIRED_LOG="/root/expired.log"
TIMEID_FILE="/root/timeid"
UEXPIRED_CMD="/bin/uexpired"  # Script to run with 'at'

#------------------------------------------------------------------------------
# Function: parse YYYYmmddHHMM -> "YYYY-MM-DD HH:MM:SS"
#------------------------------------------------------------------------------
parse_date() {
  local d="$1"
  local parseable
  parseable="$(echo "$d" | sed -E 's|^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})$|\1-\2-\3 \4:\5|')"
  date -d "$parseable" "+%F %T" 2>/dev/null || echo "(unparsable)"
}

#==============================================================================
# 1) Themed Header (Blue background, white bold text)
#==============================================================================
tput setaf 7 ; tput setab 4 ; tput bold
printf '%35s%s%-10s\n' "üêâ  Renew Expired Users  üêâ"
tput sgr0
echo ""

#==============================================================================
# 2) Check if /root/expired.log exists and has content
#==============================================================================
if [ ! -s "$EXPIRED_LOG" ]; then
  echo -e "\e[1;31mNo expired users found.\e[0m"
  exit 0
fi

#==============================================================================
# 3) Print "LIST OF EXPIRED USERS" + Table Header
#==============================================================================
echo -e "\e[1;33mLIST OF EXPIRED USERS:\e[0m"
echo ""
echo -e "\e[1;33m--------------------------------------------------------------------------------\e[0m"

# Using e.g. 7 chars for INDEX, 15 for USERNAME, 22 for LOCKED, rest for OLD EXPIRY
printf "\e[1;31m%-7s\e[0m \e[1;32m%-15s\e[0m \e[1;36m%-22s\e[0m \e[1;35m%s\e[0m\n" \
       "INDEX" "USERNAME" "LOCKED" "OLD EXPIRY"

echo -e "\e[1;33m--------------------------------------------------------------------------------\e[0m"

#==============================================================================
# 4) Read each line from expired.log, parse, and print in columns
#    - Skip empty or malformed lines
#==============================================================================
mapfile -t expired_lines < "$EXPIRED_LOG"

i=0
unset userList  # We'll store "index:username" for numeric selection
for line in "${expired_lines[@]}"; do
  # 4a) Trim leading/trailing whitespace
  line="$(echo "$line" | xargs)"
  
  # 4b) Skip if still empty
  [[ -z "$line" ]] && continue

  # 4c) We expect exactly 3 fields: locked_at, user, old_timeid
  read -r locked_at user old_timeid <<< "$line"
  
  # If any of them are empty, skip the line
  if [[ -z "$locked_at" || -z "$user" || -z "$old_timeid" ]]; then
    continue
  fi

  ((i++))

  # Convert to human-readable
  locked_hr="$(parse_date "$locked_at")"
  old_timeid_hr="$(parse_date "$old_timeid")"

  # Format index as [01], user, locked, old expiry with real ANSI escapes:
  index="$(printf '%02d' "$i")"
  sIndex="$(printf '\e[1;31m[%s]\e[0m' "$index")"
  sUser="$(printf '\e[1;32m%s\e[0m' "$user")"
  sLocked="$(printf '\e[1;37m%s\e[0m' "$locked_hr")"
  sOldExp="$(printf '\e[1;37m%s\e[0m' "$old_timeid_hr")"

  # Print in columns
  printf '%1s %19s %36s %34s\n' "$sIndex" "$sUser" "$sLocked" "$sOldExp"

  # Store for numeric mapping
  userList+="$index:$user"$'\n'
done

numUsers="$i"
echo ""

# If after skipping invalid lines we have no valid users, exit
if [[ "$numUsers" -eq 0 ]]; then
  echo -e "\e[1;31mNo valid expired users found in $EXPIRED_LOG.\e[0m"
  exit 1
fi

#==============================================================================
# 5) Prompt user (either numeric index or username)
#==============================================================================
echo -ne "\e[1;32mEnter or select a user \e[1;33m[\e[1;36m1\e[1;31m-\e[1;36m$numUsers\e[1;33m]\e[1;37m: "
read option

# 5a) Trim leading/trailing spaces from user input
option="$(echo "$option" | xargs)"
if [[ -z "$option" ]]; then
  tput setaf 7 ; tput setab 1 ; tput bold
  echo ""
  echo "Empty input, no user selected!"
  echo ""
  tput sgr0
  exit 1
fi

# Try numeric match first
selectedUser="$(echo "$userList" | grep -E "^[0]*$option:" | cut -d: -f2)"

# If that didn't work, assume user typed the actual username
if [[ -z "$selectedUser" ]]; then
  directCheck="$(awk -v typed="$option" '$2 == typed {print $2}' "$EXPIRED_LOG")"
  # Possibly trim directCheck, just in case
  directCheck="$(echo "$directCheck" | xargs)"
  if [[ -n "$directCheck" ]]; then
    selectedUser="$directCheck"
  fi
fi

# Validate we have a user
if [[ -z "$selectedUser" ]]; then
  tput setaf 7 ; tput setab 1 ; tput bold
  echo ""
  echo "You entered an empty or invalid user!"
  echo ""
  tput sgr0
  exit 1
fi

#==============================================================================
# 6) Ask how many days to renew
#==============================================================================
echo -ne "\n\e[1;32mHow many days to renew for \e[1;33m$selectedUser\e[1;37m? "
read days

# Trim and check again
days="$(echo "$days" | xargs)"
if [[ -z "$days" ]]; then
  tput setaf 7 ; tput setab 1 ; tput bold
  echo ""
  echo "Empty input for days!"
  echo ""
  tput sgr0
  exit 1
fi

# Validate days is a positive integer
if ! [[ "$days" =~ ^[0-9]+$ ]]; then
  tput setaf 7 ; tput setab 1 ; tput bold
  echo ""
  echo "Invalid or empty days! Must be a positive integer."
  echo ""
  tput sgr0
  exit 1
fi

#==============================================================================
# 7) Compute new expiry, update TIMEID_FILE, schedule 'at', remove from log
#==============================================================================
new_timeid="$(date -d "+$days days" "+%Y%m%d%H%M")"
new_timeid_hr="$(parse_date "$new_timeid")"

# Remove any old line for this user, then append the new expiry
sed -i "/^${selectedUser}[[:space:]]/d" "$TIMEID_FILE"
echo "$selectedUser $new_timeid" >> "$TIMEID_FILE"

# Schedule silently
echo "$UEXPIRED_CMD" | at -t "$new_timeid" >/dev/null 2>&1

# Remove from expired.log
sed -i "/[[:space:]]$selectedUser[[:space:]]/d" "$EXPIRED_LOG"

#==============================================================================
# 8) Final confirmation
#==============================================================================
echo ""
printf "\e[1;31mUser %s has been renewed until: %s\e[0m\n" \
       "$selectedUser" "$new_timeid_hr"
echo ""     


exit 0
